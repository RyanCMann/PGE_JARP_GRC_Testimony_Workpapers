# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/PGE_JARP_GRC_Testimony_Workpapers/Rates/PG&E B-19")
Code_WD <- getwd()
Clean_Rate_Data_WD <- file.path(Code_WD, Data_Year,paste0(Data_Timestep_Length, "-Minute Data"))
Data_Year <- 2019
Data_Timestep_Length <- 5 # Timestep length, in minutes
#### Load Packages ####
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/PGE_JARP_GRC_Testimony_Workpapers/Rates/PG&E B-19")
Code_WD <- getwd()
Clean_Rate_Data_WD <- file.path(Code_WD, Data_Year,paste0(Data_Timestep_Length, "-Minute Data"))
Summer_Peak_Rate <- 0.16504
Summer_Partial_Peak_Rate <- 0.13529
Summer_Off_Peak_Rate <- 0.11424
Winter_Peak_Rate <- 0.14614
Winter_Off_Peak_Rate <- 0.11416
Winter_Super_Off_Peak_Rate <- 0.07125
Start_Date_Time <- as.POSIXct(paste0(Data_Year, "-01-01 00:00:00"), tz = "America/Los_Angeles")
End_Date_Time <- as.POSIXct(paste0(Data_Year, "-12-31 23:55:00"), tz = "America/Los_Angeles")
PGE_B19 <- data.frame(Date_Time = seq.POSIXt(Start_Date_Time, End_Date_Time, by = paste(Data_Timestep_Length, "min")))
New_Years_Day <- "2019-01-01"
Presidents_Day <- "2019-02-18"
Memorial_Day <- "2019-05-27"
Independence_Day <- "2019-07-04"
Labor_Day <- "2019-09-02"
Veterans_Day <- "2019-11-11"
Thanksgiving_Day <- "2019-11-28"
Christmas_Day <- "2019-12-25"
Holidays_List <- as.Date(c(New_Years_Day, Presidents_Day, Memorial_Day, Independence_Day, Labor_Day, Veterans_Day, Thanksgiving_Day, Christmas_Day), tz = "America/Los_Angeles")
rm(New_Years_Day, Presidents_Day, Memorial_Day, Independence_Day, Labor_Day, Veterans_Day, Thanksgiving_Day, Christmas_Day)
# When a holiday listed above falls on Sunday, the following Monday is recognized. No change will be made for holidays falling on Saturday.
for(Holiday_Iter in seq_along(Holidays_List)){
if(weekdays(Holidays_List[Holiday_Iter]) == "Sunday"){
Holidays_List = c(Holidays_List, Holidays_List[Holiday_Iter] + 1)
}
}
rm(Holiday_Iter)
PGE_B19 <- PGE_B19 %>%
mutate(Month = month(dttm)) %>%
mutate(Season = ifelse(Month %in% c(6:9), "Summer", "Winter")) %>% # Dates between June 1 and September 30 are considered "Summer"
mutate(Weekday_Weekend_Holiday = ifelse(weekdays(dttm) %in% c("Saturday", "Sunday") |
as.Date(dttm, tz = "America/Los_Angeles") %in% Holidays_List, "Weekend/Holiday", "Weekday")) %>% # Monday-Friday = Weekday, Saturday & Sunday = Weekend
mutate(Hour_Decimal = hour(dttm) + minute(dttm)/60) # ex. 8:30 am = 8.5
rm(Holidays_List)
PGE_B19 <- data.frame(dttm = seq.POSIXt(Start_Date_Time, End_Date_Time, by = paste(Data_Timestep_Length, "min")))
New_Years_Day <- "2019-01-01"
Presidents_Day <- "2019-02-18"
Memorial_Day <- "2019-05-27"
Independence_Day <- "2019-07-04"
Labor_Day <- "2019-09-02"
Veterans_Day <- "2019-11-11"
Thanksgiving_Day <- "2019-11-28"
Christmas_Day <- "2019-12-25"
Holidays_List <- as.Date(c(New_Years_Day, Presidents_Day, Memorial_Day, Independence_Day, Labor_Day, Veterans_Day, Thanksgiving_Day, Christmas_Day), tz = "America/Los_Angeles")
rm(New_Years_Day, Presidents_Day, Memorial_Day, Independence_Day, Labor_Day, Veterans_Day, Thanksgiving_Day, Christmas_Day)
# When a holiday listed above falls on Sunday, the following Monday is recognized. No change will be made for holidays falling on Saturday.
for(Holiday_Iter in seq_along(Holidays_List)){
if(weekdays(Holidays_List[Holiday_Iter]) == "Sunday"){
Holidays_List = c(Holidays_List, Holidays_List[Holiday_Iter] + 1)
}
}
rm(Holiday_Iter)
PGE_B19 <- PGE_B19 %>%
mutate(Month = month(dttm)) %>%
mutate(Season = ifelse(Month %in% c(6:9), "Summer", "Winter")) %>% # Dates between June 1 and September 30 are considered "Summer"
mutate(Weekday_Weekend_Holiday = ifelse(weekdays(dttm) %in% c("Saturday", "Sunday") |
as.Date(dttm, tz = "America/Los_Angeles") %in% Holidays_List, "Weekend/Holiday", "Weekday")) %>% # Monday-Friday = Weekday, Saturday & Sunday = Weekend
mutate(Hour_Decimal = hour(dttm) + minute(dttm)/60) # ex. 8:30 am = 8.5
rm(Holidays_List)
View(PGE_B19)
Joined_CAISO_WT_PGE <- Joined_CAISO_WT_PGE %>%
mutate(Summer_Peak_Binary = ifelse(Season == "Summer" &
Hour_Decimal >= (12+4) & Hour_Decimal < (12+9), 1, 0))
# Summer Partial-Peak
# Summer Partial Peak = 2:00 pm to 4:00 pm, 9:00 pm to 11:00 pm.
Joined_CAISO_WT_PGE <- Joined_CAISO_WT_PGE %>%
mutate(Summer_Partial_Peak_Binary = ifelse(Season == "Summer" &
((Hour_Decimal >= (12+2) & Hour_Decimal < (12+4)) |
(Hour_Decimal >= (12 + 9) & Hour_Decimal < (12 + 11))), 1, 0))
# Summer Off-Peak
# Summer Off Peak = 11:00 pm to 2:00 pm.
# In other words, if it's summer and not peak or partial peak, it's off-peak.
Joined_CAISO_WT_PGE <- Joined_CAISO_WT_PGE %>%
mutate(Summer_Off_Peak_Binary = ifelse(Season == "Summer" &
Summer_Peak_Binary == 0 &
Summer_Partial_Peak_Binary == 0, 1, 0))
# Winter Peak
# Winter Peak = October-May, 4:00 pm-9:00 pm.
Joined_CAISO_WT_PGE <- Joined_CAISO_WT_PGE %>%
mutate(Winter_Peak_Binary = ifelse(Season == "Winter" &
Hour_Decimal >= (12+4) & Hour_Decimal < (12+9), 1, 0))
# Winter Super Off-Peak
# Winter Super Off-Peak = March-May, 9:00 am - 2:00 pm
Joined_CAISO_WT_PGE <- Joined_CAISO_WT_PGE %>%
mutate(Winter_Super_Off_Peak_Binary = ifelse(Season == "Winter" &
month(dttm) %in% c(3:5) &
Hour_Decimal >= 9 & Hour_Decimal < (12+2), 1, 0))
# Winter Off-Peak
# Winter Off Peak = 9:00 pm to 4:00 pm in October-February,
# 9:00 pm to 9:00 am and 2:00 pm to 4:00 pm in March-May weekdays.
# In other words, if it's winter and not peak or super off-peak, it's off-peak.
Joined_CAISO_WT_PGE <- Joined_CAISO_WT_PGE %>%
mutate(Winter_Off_Peak_Binary = ifelse(Season == "Winter" &
Winter_Peak_Binary == 0 &
Winter_Super_Off_Peak_Binary == 0, 1, 0))
Data_Year <- 2019
Data_Timestep_Length <- 5 # Timestep length, in minutes
#### Load Packages ####
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/PGE_JARP_GRC_Testimony_Workpapers/Rates/PG&E B-19")
Code_WD <- getwd()
Clean_Rate_Data_WD <- file.path(Code_WD, Data_Year,paste0(Data_Timestep_Length, "-Minute Data"))
#### Calculate PG&E B-19 Energy Rate Values ####
# Values are for 2020-11-01 PG&E B-19, Secondary Voltage, in $USD. (https://www.pge.com/tariffs/assets/pdf/tariffbook/ELEC_SCHEDS_B-19.pdf)
# Note: Power factor charges are not included in this analysis.
Summer_Peak_Rate <- 0.16504
Summer_Partial_Peak_Rate <- 0.13529
Summer_Off_Peak_Rate <- 0.11424
Winter_Peak_Rate <- 0.14614
Winter_Off_Peak_Rate <- 0.11416
Winter_Super_Off_Peak_Rate <- 0.07125
Start_Date_Time <- as.POSIXct(paste0(Data_Year, "-01-01 00:00:00"), tz = "America/Los_Angeles")
End_Date_Time <- as.POSIXct(paste0(Data_Year, "-12-31 23:55:00"), tz = "America/Los_Angeles")
PGE_B19 <- data.frame(dttm = seq.POSIXt(Start_Date_Time, End_Date_Time, by = paste(Data_Timestep_Length, "min")))
# Holidays for 2019
# Source: https://www.PGE.com/whenmatters
# The Time-of-Use holidays are:
# New Year's Day (January 1)
# President's Day (third Monday in February)
# Memorial Day (last Monday in May)
# Independence Day (July 4)
# Labor Day (first Monday in September)
# Veterans Day (November 11)
# Thanksgiving Day (fourth Thursday in November)
# Christmas Day (December 25).
# When a holiday listed above falls on Sunday, the following Monday is recognized. No change will be made for holidays falling on Saturday.
New_Years_Day <- "2019-01-01"
Presidents_Day <- "2019-02-18"
Memorial_Day <- "2019-05-27"
Independence_Day <- "2019-07-04"
Labor_Day <- "2019-09-02"
Veterans_Day <- "2019-11-11"
Thanksgiving_Day <- "2019-11-28"
Christmas_Day <- "2019-12-25"
Holidays_List <- as.Date(c(New_Years_Day, Presidents_Day, Memorial_Day, Independence_Day, Labor_Day, Veterans_Day, Thanksgiving_Day, Christmas_Day), tz = "America/Los_Angeles")
rm(New_Years_Day, Presidents_Day, Memorial_Day, Independence_Day, Labor_Day, Veterans_Day, Thanksgiving_Day, Christmas_Day)
# When a holiday listed above falls on Sunday, the following Monday is recognized. No change will be made for holidays falling on Saturday.
for(Holiday_Iter in seq_along(Holidays_List)){
if(weekdays(Holidays_List[Holiday_Iter]) == "Sunday"){
Holidays_List = c(Holidays_List, Holidays_List[Holiday_Iter] + 1)
}
}
rm(Holiday_Iter)
PGE_B19 <- PGE_B19 %>%
mutate(Month = month(dttm)) %>%
mutate(Season = ifelse(Month %in% c(6:9), "Summer", "Winter")) %>% # Dates between June 1 and September 30 are considered "Summer"
mutate(Weekday_Weekend_Holiday = ifelse(weekdays(dttm) %in% c("Saturday", "Sunday") |
as.Date(dttm, tz = "America/Los_Angeles") %in% Holidays_List, "Weekend/Holiday", "Weekday")) %>% # Monday-Friday = Weekday, Saturday & Sunday = Weekend
mutate(Hour_Decimal = hour(dttm) + minute(dttm)/60) # ex. 8:30 am = 8.5
rm(Holidays_List)
# Summer Peak
# Summer Peak = June-September, 4:00 pm-9:00 pm.
PGE_B19 <- PGE_B19 %>%
mutate(Summer_Peak_Binary = ifelse(Season == "Summer" &
Hour_Decimal >= (12+4) & Hour_Decimal < (12+9), 1, 0))
# Summer Partial-Peak
# Summer Partial Peak = 2:00 pm to 4:00 pm, 9:00 pm to 11:00 pm.
PGE_B19 <- PGE_B19 %>%
mutate(Summer_Partial_Peak_Binary = ifelse(Season == "Summer" &
((Hour_Decimal >= (12+2) & Hour_Decimal < (12+4)) |
(Hour_Decimal >= (12 + 9) & Hour_Decimal < (12 + 11))), 1, 0))
# Summer Off-Peak
# Summer Off Peak = 11:00 pm to 2:00 pm.
# In other words, if it's summer and not peak or partial peak, it's off-peak.
PGE_B19 <- PGE_B19 %>%
mutate(Summer_Off_Peak_Binary = ifelse(Season == "Summer" &
Summer_Peak_Binary == 0 &
Summer_Partial_Peak_Binary == 0, 1, 0))
# Winter Peak
# Winter Peak = October-May, 4:00 pm-9:00 pm.
PGE_B19 <- PGE_B19 %>%
mutate(Winter_Peak_Binary = ifelse(Season == "Winter" &
Hour_Decimal >= (12+4) & Hour_Decimal < (12+9), 1, 0))
# Winter Super Off-Peak
# Winter Super Off-Peak = March-May, 9:00 am - 2:00 pm
PGE_B19 <- PGE_B19 %>%
mutate(Winter_Super_Off_Peak_Binary = ifelse(Season == "Winter" &
month(dttm) %in% c(3:5) &
Hour_Decimal >= 9 & Hour_Decimal < (12+2), 1, 0))
# Winter Off-Peak
# Winter Off Peak = 9:00 pm to 4:00 pm in October-February,
# 9:00 pm to 9:00 am and 2:00 pm to 4:00 pm in March-May weekdays.
# In other words, if it's winter and not peak or super off-peak, it's off-peak.
PGE_B19 <- PGE_B19 %>%
mutate(Winter_Off_Peak_Binary = ifelse(Season == "Winter" &
Winter_Peak_Binary == 0 &
Winter_Super_Off_Peak_Binary == 0, 1, 0))
Data_Year <- 2019
Data_Timestep_Length <- 5 # Timestep length, in minutes
#### Load Packages ####
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/PGE_JARP_GRC_Testimony_Workpapers/Rates/PG&E B-19")
Code_WD <- getwd()
Clean_Rate_Data_WD <- file.path(Code_WD, Data_Year,paste0(Data_Timestep_Length, "-Minute Data"))
#### Calculate PG&E B-19 Energy Rate Values ####
# Values are for 2020-11-01 PG&E B-19, Secondary Voltage, in $USD. (https://www.pge.com/tariffs/assets/pdf/tariffbook/ELEC_SCHEDS_B-19.pdf)
# Note: Power factor charges are not included in this analysis.
Summer_Peak_Rate <- 0.16504
Summer_Partial_Peak_Rate <- 0.13529
Summer_Off_Peak_Rate <- 0.11424
Winter_Peak_Rate <- 0.14614
Winter_Off_Peak_Rate <- 0.11416
Winter_Super_Off_Peak_Rate <- 0.07125
Start_Date_Time <- as.POSIXct(paste0(Data_Year, "-01-01 00:00:00"), tz = "America/Los_Angeles")
End_Date_Time <- as.POSIXct(paste0(Data_Year, "-12-31 23:55:00"), tz = "America/Los_Angeles")
PGE_B19 <- data.frame(dttm = seq.POSIXt(Start_Date_Time, End_Date_Time, by = paste(Data_Timestep_Length, "min")))
# Holidays for 2019
# Source: https://www.PGE.com/whenmatters
# The Time-of-Use holidays are:
# New Year's Day (January 1)
# President's Day (third Monday in February)
# Memorial Day (last Monday in May)
# Independence Day (July 4)
# Labor Day (first Monday in September)
# Veterans Day (November 11)
# Thanksgiving Day (fourth Thursday in November)
# Christmas Day (December 25).
# When a holiday listed above falls on Sunday, the following Monday is recognized. No change will be made for holidays falling on Saturday.
New_Years_Day <- "2019-01-01"
Presidents_Day <- "2019-02-18"
Memorial_Day <- "2019-05-27"
Independence_Day <- "2019-07-04"
Labor_Day <- "2019-09-02"
Veterans_Day <- "2019-11-11"
Thanksgiving_Day <- "2019-11-28"
Christmas_Day <- "2019-12-25"
Holidays_List <- as.Date(c(New_Years_Day, Presidents_Day, Memorial_Day, Independence_Day, Labor_Day, Veterans_Day, Thanksgiving_Day, Christmas_Day), tz = "America/Los_Angeles")
rm(New_Years_Day, Presidents_Day, Memorial_Day, Independence_Day, Labor_Day, Veterans_Day, Thanksgiving_Day, Christmas_Day)
# When a holiday listed above falls on Sunday, the following Monday is recognized. No change will be made for holidays falling on Saturday.
for(Holiday_Iter in seq_along(Holidays_List)){
if(weekdays(Holidays_List[Holiday_Iter]) == "Sunday"){
Holidays_List = c(Holidays_List, Holidays_List[Holiday_Iter] + 1)
}
}
rm(Holiday_Iter)
PGE_B19 <- PGE_B19 %>%
mutate(Month = month(dttm)) %>%
mutate(Season = ifelse(Month %in% c(6:9), "Summer", "Winter")) %>% # Dates between June 1 and September 30 are considered "Summer"
mutate(Weekday_Weekend_Holiday = ifelse(weekdays(dttm) %in% c("Saturday", "Sunday") |
as.Date(dttm, tz = "America/Los_Angeles") %in% Holidays_List, "Weekend/Holiday", "Weekday")) %>% # Monday-Friday = Weekday, Saturday & Sunday = Weekend
mutate(Hour_Decimal = hour(dttm) + minute(dttm)/60) # ex. 8:30 am = 8.5
rm(Holidays_List)
# Summer Peak
# Summer Peak = June-September, 4:00 pm-9:00 pm.
PGE_B19 <- PGE_B19 %>%
mutate(Summer_Peak_Binary = ifelse(Season == "Summer" &
Hour_Decimal >= (12+4) & Hour_Decimal < (12+9), 1, 0))
# Summer Partial-Peak
# Summer Partial Peak = 2:00 pm to 4:00 pm, 9:00 pm to 11:00 pm.
PGE_B19 <- PGE_B19 %>%
mutate(Summer_Partial_Peak_Binary = ifelse(Season == "Summer" &
((Hour_Decimal >= (12+2) & Hour_Decimal < (12+4)) |
(Hour_Decimal >= (12 + 9) & Hour_Decimal < (12 + 11))), 1, 0))
# Summer Off-Peak
# Summer Off Peak = 11:00 pm to 2:00 pm.
# In other words, if it's summer and not peak or partial peak, it's off-peak.
PGE_B19 <- PGE_B19 %>%
mutate(Summer_Off_Peak_Binary = ifelse(Season == "Summer" &
Summer_Peak_Binary == 0 &
Summer_Partial_Peak_Binary == 0, 1, 0))
# Winter Peak
# Winter Peak = October-May, 4:00 pm-9:00 pm.
PGE_B19 <- PGE_B19 %>%
mutate(Winter_Peak_Binary = ifelse(Season == "Winter" &
Hour_Decimal >= (12+4) & Hour_Decimal < (12+9), 1, 0))
# Winter Super Off-Peak
# Winter Super Off-Peak = March-May, 9:00 am - 2:00 pm
PGE_B19 <- PGE_B19 %>%
mutate(Winter_Super_Off_Peak_Binary = ifelse(Season == "Winter" &
month(dttm) %in% c(3:5) &
Hour_Decimal >= 9 & Hour_Decimal < (12+2), 1, 0))
# Winter Off-Peak
# Winter Off Peak = 9:00 pm to 4:00 pm in October-February,
# 9:00 pm to 9:00 am and 2:00 pm to 4:00 pm in March-May weekdays.
# In other words, if it's winter and not peak or super off-peak, it's off-peak.
PGE_B19 <- PGE_B19 %>%
mutate(Winter_Off_Peak_Binary = ifelse(Season == "Winter" &
Winter_Peak_Binary == 0 &
Winter_Super_Off_Peak_Binary == 0, 1, 0))
March_April_DST_Adjustment_Period_2019 <- seq.Date(as.Date("2019-03-10", tz = "America/Los_Angeles"), as.Date("2019-04-06", tz = "America/Los_Angeles"), by = "1 day")
October_November_DST_Adjustment_Period_2019 <- seq.Date(as.Date("2019-10-27", tz = "America/Los_Angeles"), as.Date("2019-11-02", tz = "America/Los_Angeles"), by = "1 day")
DST_Adjustment_Period_Dates <- c(March_April_DST_Adjustment_Period_2019, October_November_DST_Adjustment_Period_2019)
rm(March_April_DST_Adjustment_Period_2019, October_November_DST_Adjustment_Period_2019)
PGE_B19 <- PGE_B19 %>%
mutate(DST_Adjustment_Flag = ifelse(as.Date(dttm, tz = "America/Los_Angeles") %in% DST_Adjustment_Period_Dates, 1, 0)) %>%
mutate(Summer_Peak_Binary = ifelse(DST_Adjustment_Flag ==1, lag(Summer_Peak_Binary, n = (60/Data_Timestep_Length)), Summer_Peak_Binary)) %>%
mutate(Summer_Partial_Peak_Binary = ifelse(DST_Adjustment_Flag ==1, lag(Summer_Partial_Peak_Binary, n = (60/Data_Timestep_Length)), Summer_Partial_Peak_Binary)) %>%
mutate(Summer_Off_Peak_Binary = ifelse(DST_Adjustment_Flag ==1, lag(Summer_Off_Peak_Binary, n = (60/Data_Timestep_Length)), Summer_Off_Peak_Binary)) %>%
mutate(Winter_Peak_Binary = ifelse(DST_Adjustment_Flag ==1, lag(Winter_Peak_Binary, n = (60/Data_Timestep_Length)), Winter_Peak_Binary)) %>%
mutate(Winter_Super_Off_Peak_Binary = ifelse(DST_Adjustment_Flag ==1, lag(Winter_Super_Off_Peak_Binary, n = (60/Data_Timestep_Length)), Winter_Super_Off_Peak_Binary)) %>%
mutate(Winter_Off_Peak_Binary = ifelse(DST_Adjustment_Flag ==1, lag(Winter_Off_Peak_Binary, n = (60/Data_Timestep_Length)), Winter_Off_Peak_Binary))
PGE_B19_Vector_Check <- PGE_B19 %>%
mutate(Check_Sum = Summer_Peak_Binary + Summer_Partial_Peak_Binary + Summer_Off_Peak_Binary + Winter_Peak_Binary + Winter_Super_Off_Peak_Binary + Winter_Off_Peak_Binary) %>%
filter(Check_Sum != 1)
rm(PGE_B19_Vector_Check)
PGE_B19 <- PGE_B19 %>%
mutate(Energy_Rates = (Summer_Peak_Binary * Summer_Peak_Rate) +
(Summer_Partial_Peak_Binary * Summer_Partial_Peak_Rate) +
(Summer_Off_Peak_Binary * Summer_Off_Peak_Rate) +
(Winter_Peak_Binary * Winter_Peak_Rate) +
(Winter_Super_Off_Peak_Binary * Winter_Super_Off_Peak_Rate) +
(Winter_Off_Peak_Binary * Winter_Off_Peak_Rate))
rm(Summer_Peak_Rate, Summer_Partial_Peak_Rate, Summer_Off_Peak_Rate, Winter_Peak_Rate, Winter_Off_Peak_Rate, Winter_Super_Off_Peak_Rate)
View(PGE_B19)
setwd(Clean_Rate_Data_WD)
saveRDS(PGE_B19, "PGE_B19.rds")
Clean_Rate_Data_WD
setwd(Clean_Rate_Data_WD)
saveRDS(PGE_B19, "PGE_B19.rds")
setwd("~/Desktop/PGE_JARP_GRC_Testimony_Workpapers/PG&E Data Request 1 to JARP")
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/PGE_JARP_GRC_Testimony_Workpapers/PG&E Data Request 1 to JARP")
Code_WD <- getwd()
setwd("../")
Main_WD <- getwd()
setwd(file.path(Main_WD, "Marginal Emissions Data", "Clean Marginal Emissions Data"))
Emissions_WD <- getwd()
setwd(file.path(Main_WD, "Rates"))
Rates_WD <- getwd()
setwd(file.path(Main_WD, "Wholesale Price Data", "Clean Wholesale DAM LMP Data"))
Wholesale_DAM_Price_WD <- getwd()
setwd(file.path(Main_WD, "Wholesale Price Data", "Clean Wholesale RT5M LMP Data"))
Wholesale_RT5M_Price_WD <- getwd()
setwd(Rates_WD)
PGE_B19 <- readRDS("PGE_B19.rds")
getwd()
list.files()
PGE_B19 <- readRDS(file.path(Rates_WD, "PG&E B-19", "2019", "5-Minute Data", "PGE_B19.rds"))
setwd(Wholesale_DAM_Price_WD)
Clean_2019_DLAP_PGAE_APND_DAM_LMP <- readRDS("Clean_2019_DLAP_PGAE_APND_DAM_LMP.rds")
rm(Clean_2019_DLAP_PGAE_APND_DAM_LMP)
setwd(Wholesale_RT5M_Price_WD)
Clean_2019_DLAP_PGAE_APND_RT5M_LMP <- readRDS("Clean_2019_DLAP_PGAE_APND_RT5M_LMP.rds")
View(Clean_2019_DLAP_PGAE_APND_RT5M_LMP)
setwd(Emissions_WD)
Clean_PGE_SGIP_MOER <- readRDS("Clean_PGE_SGIP_MOER.rds")
View(Clean_PGE_SGIP_MOER)
setwd(Wholesale_DAM_Price_WD)
Clean_2019_DLAP_PGAE_APND_DAM_LMP <- readRDS("Clean_2019_DLAP_PGAE_APND_DAM_LMP.rds")
View(Clean_2019_DLAP_PGAE_APND_RT5M_LMP)
setwd(Wholesale_DAM_Price_WD)
Clean_2019_DLAP_PGAE_APND_DAM_LMP <- readRDS("Clean_2019_DLAP_PGAE_APND_DAM_LMP.rds")
Clean_2019_DLAP_PGAE_APND_DAM_LMP_5_min <-  approx(Clean_2019_DLAP_PGAE_APND_DAM_LMP$dttm,
Clean_2019_DLAP_PGAE_APND_DAM_LMP$LMP_DAM,
Clean_2019_DLAP_PGAE_APND_RT5M_LMP$dttm,
method = "constant",
f = 0,
rule = 2,
ties = mean)
Clean_2019_DLAP_PGAE_APND_RT5M_LMP <- Clean_2019_DLAP_PGAE_APND_RT5M_LMP %>%
mutate(LMP_DAM = Clean_2019_DLAP_PGAE_APND_DAM_LMP_5_min$y)
View(Clean_2019_DLAP_PGAE_APND_RT5M_LMP)
Clean_2019_DLAP_PGAE_APND_LMP <- Clean_2019_DLAP_PGAE_APND_RT5M_LMP %>%
mutate(LMP_DAM = Clean_2019_DLAP_PGAE_APND_DAM_LMP_5_min$y)
View(Clean_2019_DLAP_PGAE_APND_LMP)
rm(Clean_2019_DLAP_PGAE_APND_RT5M_LMP, Clean_2019_DLAP_PGAE_APND_DAM_LMP, Clean_2019_DLAP_PGAE_APND_DAM_LMP_5_min)
View(PGE_B19)
Joined_CAISO_WT_PGE <- PGE_B19 %>%
select(dttm, Energy_Rates)
View(Joined_CAISO_WT_PGE)
Joined_CAISO_WT_PGE <- PGE_B19 %>%
select(dttm, Energy_Rates) %>%
left_join(Clean_2019_DLAP_PGAE_APND_LMP, by = "dttm") %>%
left_join(Clean_PGE_SGIP_MOER, by = "dttm")
View(Joined_CAISO_WT_PGE)
rm(PGE_B19, Clean_2019_DLAP_PGAE_APND_LMP, Clean_PGE_SGIP_MOER)
setwd(Code_WD)
write.csv(Joined_CAISO_WT_PGE, "JOined_CAISO_WT_PGE.csv", row.names = F)
write.csv(Joined_CAISO_WT_PGE, "Joined_CAISO_WT_PGE.csv", row.names = F)
write.csv(Joined_CAISO_WT_PGE, "Joined_CAISO_WT_PGE.csv", row.names = F)
Price_Spike_Count <- Joined_CAISO_WT_PGE %>%
top_n(600, LMP_RT5M) %>%
mutate(Hour_Beginning = lubridate::hour(dttm)) %>%
group_by(Hour_Beginning) %>%
summarize(Price_Spike_Count = n())
View(Price_Spike_Count)
Price_Spike_Count <- Joined_CAISO_WT_PGE %>%
top_n(600, LMP_RT5M) %>%
mutate(Hour_Beginning = lubridate::hour(dttm)) %>%
group_by(Hour_Beginning) %>%
summarize(Price_Spike_Count = n())
View(Price_Spike_Count)
write.csv(Price_Spike_Count, "Price_Spike_Count_by_Hour.csv", row.names = F)
seq(16, 20)
Price_Spike_Count %>% filter(!(Hour_Beginning %in% seq(16, 20)))
Price_Spike_Count %>% filter(!(Hour_Beginning %in% seq(16, 20))) %>% sum(Price_Spike_Count)
sum(Price_Spike_Count$Price_Spike_Count)
rm(Price_Spike_Count)
Top_600_Price_Spike_Count <- Joined_CAISO_WT_PGE %>%
top_n(600, LMP_RT5M) %>%
mutate(Hour_Beginning = lubridate::hour(dttm)) %>%
group_by(Hour_Beginning) %>%
summarize(Price_Spike_Count = n())
write.csv(Top_600_Price_Spike_Count, "Top_600_Price_Spike_Count.csv", row.names = F)
Price_Spikes_Outside_Peak_Period <- Top_600_Price_Spike_Count %>%
filter(!(Hour_Beginning %in% seq(16, 20))) %>%
sum(Price_Spike_Count)
Price_Spikes_Outside_Peak_Period <- Top_600_Price_Spike_Count %>%
filter(!(Hour_Beginning %in% seq(16, 20)))
View(Top_600_Price_Spike_Count)
Price_Spikes_Outside_Peak_Period <- Top_600_Price_Spike_Count %>%
filter(!(Hour_Beginning %in% seq(16, 20))) %>%
summarize(sum(Price_Spike_Count))
View(Price_Spikes_Outside_Peak_Period)
Price_Spikes_Outside_Peak_Period <- Top_600_Price_Spike_Count %>%
filter(!(Hour_Beginning %in% seq(16, 20))) %>%
sum(Price_Spike_Count)
Price_Spikes_Outside_Peak_Period <- Top_600_Price_Spike_Count %>%
filter(!(Hour_Beginning %in% seq(16, 20)))
sum(Price_Spikes_Outside_Peak_Period$Price_Spike_Count)
sum(Top_600_Price_Spike_Count$Price_Spike_Count)
273/600
Price_Spikes_Outside_Peak_Period_Percentage = sum(Price_Spikes_Outside_Peak_Period$Price_Spike_Count)/600
rm(Price_Spikes_Outside_Peak_Period, Price_Spikes_Outside_Peak_Period_Percentage)
Price_Spikes_Outside_Current_PDP <- Top_600_Price_Spike_Count %>%
filter(!(Hour_Beginning %in% seq(14, 17)))
sum(Price_Spikes_Outside_Current_PDP$Price_Spike_Count)/600
Price_Spikes_Outside_Current_PDP <- Top_600_Price_Spike_Count %>%
filter(!(Hour_Beginning %in% seq(14, 17)))
Price_Spikes_Outside_Current_PDP_Percentage <- sum(Price_Spikes_Outside_Current_PDP$Price_Spike_Count)/600 # 273/600 = 78.3%
rm(Price_Spikes_Outside_Current_PDP, Price_Spikes_Outside_Current_PDP_Percentage)
Price_Spikes_Outside_Future_PDP <- Top_600_Price_Spike_Count %>%
filter(!(Hour_Beginning %in% seq(17, 19)))
Price_Spikes_Outside_Future_PDP_Percentage <- sum(Price_Spikes_Outside_Future_PDP$Price_Spike_Count)/600
Price_Spikes_Outside_Future_PDP <- Top_600_Price_Spike_Count %>%
filter(!(Hour_Beginning %in% seq(17, 19)))
Price_Spikes_Outside_Future_PDP_Percentage <- sum(Price_Spikes_Outside_Future_PDP$Price_Spike_Count)/600 # 273/600 = 51.3%
rm(Price_Spikes_Outside_Future_PDP, Price_Spikes_Outside_Future_PDP_Percentage)
Selected_Plot_Date <- as.Date("2019-03-11", tz = "America/Los_Angeles")
rm(Top_600_Price_Spike_Count)
Joined_CAISO_WT_PGE_Long_Filtered <- Joined_CAISO_WT_PGE %>%
filter(as.Date(dttm, tz = "America/Los_Angeles") == Selected_Plot_Date) %>%
gather(key = "Datastream", value = "Value", LMP_RT5M, moer, Energy_Rates)
ggplot(Joined_CAISO_WT_PGE_Long_Filtered, aes(x = dttm, y = Value)) +
geom_line(aes(color = Datastream)) +
facet_grid(Datastream ~ ., scales = "free_y", switch = "y", labeller = as_labeller(c(LMP_RT5M = "LMP ($/kWh)", moer = "Emissions (kg CO2/kWh)", Energy_Rates = "B-19 Secondary Rate ($/kWh)"))) +
xlab("Date-Time") +
ylab(NULL) +
ggtitle("PG&E TOU Rate, LMP, and Emissions") +
theme(text = element_text(size = 15), plot.title = element_text(hjust = 0.5)) +
theme(strip.background = element_blank(), strip.placement = "outside") +
theme(legend.position = "none") +
scale_x_datetime(limits = c(Joined_CAISO_WT_PGE_Long_Filtered$dttm[1],
Joined_CAISO_WT_PGE_Long_Filtered$dttm[nrow(Joined_CAISO_WT_PGE_Long_Filtered)]),
expand = c(0, 0))
ggsave(filename = file.path(Code_WD, paste0("PG&E LMP Emissions TOU Comparison Plot ", as.character(Selected_Plot_Date), ".png")),
width = 11, height = 8.5, units = "in")
Selected_Plot_Date <- as.Date("2019-07-22", tz = "America/Los_Angeles")
Joined_CAISO_WT_PGE_Long_Filtered <- Joined_CAISO_WT_PGE %>%
filter(as.Date(dttm, tz = "America/Los_Angeles") == Selected_Plot_Date) %>%
gather(key = "Datastream", value = "Value", LMP_RT5M, moer, Energy_Rates)
ggplot(Joined_CAISO_WT_PGE_Long_Filtered, aes(x = dttm, y = Value)) +
geom_line(aes(color = Datastream)) +
facet_grid(Datastream ~ ., scales = "free_y", switch = "y", labeller = as_labeller(c(LMP_RT5M = "LMP ($/kWh)", moer = "Emissions (kg CO2/kWh)", Energy_Rates = "B-19 Secondary Rate ($/kWh)"))) +
xlab("Date-Time") +
ylab(NULL) +
ggtitle("PG&E TOU Rate, LMP, and Emissions") +
theme(text = element_text(size = 15), plot.title = element_text(hjust = 0.5)) +
theme(strip.background = element_blank(), strip.placement = "outside") +
theme(legend.position = "none") +
scale_x_datetime(limits = c(Joined_CAISO_WT_PGE_Long_Filtered$dttm[1],
Joined_CAISO_WT_PGE_Long_Filtered$dttm[nrow(Joined_CAISO_WT_PGE_Long_Filtered)]),
expand = c(0, 0))
ggsave(filename = file.path(Code_WD, paste0("PG&E LMP Emissions TOU Comparison Plot ", as.character(Selected_Plot_Date), ".png")),
width = 11, height = 8.5, units = "in")
rm(Joined_CAISO_WT_PGE_Long_Filtered)
Selected_Plot_Date <- as.Date("2019-07-22", tz = "America/Los_Angeles")
Joined_CAISO_WT_PGE_Long_Filtered <- Joined_CAISO_WT_PGE %>%
filter(as.Date(dttm, tz = "America/Los_Angeles") == Selected_Plot_Date) %>%
gather(key = "Datastream", value = "Value", LMP_RT5M, LMP_DAM)
ggplot(Joined_CAISO_WT_PGE_Long_Filtered, aes(x = dttm, y = Value)) +
geom_line(aes(color = Datastream)) +
xlab("Date-Time") +
ylab("LMP ($/kWh)") +
ggtitle("PG&E Day-Ahead vs. Real-Time LMP Comparison") +
scale_color_discrete(name = "Legend", labels = c("Day-Ahead Market", "Real-Time 5-Minute Market")) +
theme(text = element_text(size = 15), plot.title = element_text(hjust = 0.5)) +
theme(strip.background = element_blank(), strip.placement = "outside") +
scale_x_datetime(limits = c(Joined_CAISO_WT_PGE_Long_Filtered$dttm[1],
Joined_CAISO_WT_PGE_Long_Filtered$dttm[nrow(Joined_CAISO_WT_PGE_Long_Filtered)]),
expand = c(0, 0))
ggsave(filename = file.path(Code_WD, paste0("PG&E Day-Ahead vs. Real-Time LMP Comparison ", as.character(Selected_Plot_Date), ".png")),
width = 11, height = 8.5, units = "in")
rm(Joined_CAISO_WT_PGE_Long_Filtered)
